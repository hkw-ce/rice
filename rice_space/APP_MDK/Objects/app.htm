<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Oct 28 14:27:23 2025
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_list &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f0]">__user_initial_stackheap</a>
 <LI><a href="#[141]">rt_hw_interrupt_disable</a>
 <LI><a href="#[145]">rt_hw_interrupt_enable</a>
 <LI><a href="#[1b7]">rt_hw_context_switch</a>
 <LI><a href="#[1b6]">rt_hw_context_switch_interrupt</a>
 <LI><a href="#[5]">PendSV_Handler</a>
 <LI><a href="#[1bf]">rt_hw_context_switch_to</a>
 <LI><a href="#[213]">rt_hw_interrupt_thread_switch</a>
 <LI><a href="#[3]">HardFault_Handler</a>
 <LI><a href="#[214]">rt_hw_interrupt_check</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC_COMP_IRQHandler</a><BR>
 <LI><a href="#[42]">rt_thread_idle_entry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">rt_thread_idle_entry</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_COMP_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[46]">BTN1_DOUBLE_CLICK_Handler</a> from key.o(.text.BTN1_DOUBLE_CLICK_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[44]">BTN1_LONG_PRESS_START_Handler</a> from key.o(.text.BTN1_LONG_PRESS_START_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[47]">BTN1_SINGLE_CLICK_Handler</a> from key.o(.text.BTN1_SINGLE_CLICK_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[48]">BTN2_DOUBLE_CLICK_Handler</a> from key.o(.text.BTN2_DOUBLE_CLICK_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[4a]">BTN2_LONG_PRESS_START_Handler</a> from key.o(.text.BTN2_LONG_PRESS_START_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[49]">BTN2_SINGLE_CLICK_Handler</a> from key.o(.text.BTN2_SINGLE_CLICK_Handler) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[25]">CAN_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[32]">DELAY_xUs</a> from system_mm32f0270.o(.text.DELAY_xUs) referenced from system_mm32f0270.o(.text.SystemInit)
 <LI><a href="#[10]">DMA1_Channel1_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[11]">DMA1_Channel2_3_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[12]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[3b]">GN1650_IIC_wait_ack</a> from gn1650.o(.text.GN1650_IIC_wait_ack) referenced from gn1650.o(.text.display_test)
 <LI><a href="#[3a]">GN1650_print</a> from gn1650.o(.text.GN1650_print) referenced from gn1650.o(.text.display_test)
 <LI><a href="#[3a]">GN1650_print</a> from gn1650.o(.text.GN1650_print) referenced from gn1650.o(.text.gn1650_demo)
 <LI><a href="#[f]">HWDIV_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from context_gcc.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1f]">I2C2_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[5e]">INA226_Test</a> from ina226.o(.text.INA226_Test) referenced from ina226.o(FSymTab)
 <LI><a href="#[19]">LPTIMER_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[18]">LPUART_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from mm32f0270_it.o(.text.NMI_Handler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[8]">PVD_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from context_gcc.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[b]">RCC_CRS_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[9]">RTC_BKP_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[21]">SPI2_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from mm32f0270_it.o(.text.SVC_Handler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from mm32f0270_it.o(.text.SysTick_Handler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_mm32f0270.o(.text.SystemInit) referenced from startup_mm32f0270_keil.o(.text)
 <LI><a href="#[1a]">TIM14_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1b]">TIM15_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1c]">TIM16_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[1d]">TIM17_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[14]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[15]">TIM1_CC_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from mm32f0270_it.o(.text.TIM2_IRQHandler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[17]">TIM3_IRQHandler</a> from mm32f0270_it.o(.text.TIM3_IRQHandler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from mm32_uart.o(.text.UART1_IRQHandler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[23]">UART2_IRQHandler</a> from mm32_uart.o(.text.UART2_IRQHandler) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[24]">UART3_4_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[63]">VL6180_ReadAndLog</a> from vl6180x.o(.text.VL6180_ReadAndLog) referenced from vl6180x.o(FSymTab)
 <LI><a href="#[5f]">WT588F_Init</a> from onewire_bus.o(.text.WT588F_Init) referenced from onewire_bus.o(FSymTab)
 <LI><a href="#[35]">WT588F_Send_Byte</a> from onewire_bus.o(.text.WT588F_Send_Byte) referenced from onewire_bus.o(.text.WT588F_Init)
 <LI><a href="#[7]">WWDG_IWDG_IRQHandler</a> from startup_mm32f0270_keil.o(.text) referenced from startup_mm32f0270_keil.o(RESET)
 <LI><a href="#[33]">WriteByte</a> from vl6180x.o(.text.WriteByte) referenced from vl6180x.o(.text.VL6180X_Init)
 <LI><a href="#[28]">__main</a> from __main.o(!!!main) referenced from startup_mm32f0270_keil.o(.text)
 <LI><a href="#[29]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4c]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[4d]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4f]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[50]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[4e]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[2c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[2a]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[36]">_thread_exit</a> from thread.o(.text._thread_exit) referenced from thread.o(.text._thread_init)
 <LI><a href="#[37]">_thread_timeout</a> from thread.o(.text._thread_timeout) referenced from thread.o(.text._thread_init)
 <LI><a href="#[41]">_timer_thread_entry</a> from timer.o(.text._timer_thread_entry) referenced from timer.o(.text.rt_system_timer_thread_init)
 <LI><a href="#[45]">button_attach</a> from multi_button.o(.text.button_attach) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[65]">clear</a> from cmd.o(.text.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[64]">cmd_free</a> from board.o(.text.cmd_free) referenced from board.o(FSymTab)
 <LI><a href="#[6e]">cmd_list</a> from cmd.o(.text.cmd_list) referenced from cmd.o(FSymTab)
 <LI><a href="#[0]">default_delay_us</a> from mm32_soft_i2c_v1.o(.text.default_delay_us) referenced 2 times from sc7a20.o(.data.i2c2)
 <LI><a href="#[0]">default_delay_us</a> from mm32_soft_i2c_v1.o(.text.default_delay_us) referenced 2 times from vl6180x.o(.data.i2c3)
 <LI><a href="#[0]">default_delay_us</a> from mm32_soft_i2c_v1.o(.text.default_delay_us) referenced from mm32_soft_i2c_v1.o(.text.i2c_bus_init)
 <LI><a href="#[5c]">display_test</a> from gn1650.o(.text.display_test) referenced from gn1650.o(FSymTab)
 <LI><a href="#[59]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[3c]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced from shell.o(.text.finsh_system_init)
 <LI><a href="#[58]">full_bridge_init_app</a> from pwm.o(.text.full_bridge_init_app) referenced from pwm.o(.rti_fn.6)
 <LI><a href="#[3d]">gpio_config</a> from mm32_gpio.o(.text.gpio_config) referenced from key.o(.text.gpio_init)
 <LI><a href="#[57]">gpio_init</a> from key.o(.text.gpio_init) referenced from key.o(.rti_fn.6)
 <LI><a href="#[5d]">hx711_test_entry</a> from hx711.o(.text.hx711_test_entry) referenced from hx711.o(FSymTab)
 <LI><a href="#[3e]">i2c_delay_us</a> from mm32_soft_i2c_v1.o(.text.i2c_delay_us) referenced from mm32_soft_i2c_v1.o(.text.i2c_stop)
 <LI><a href="#[31]">i2c_read_bytes</a> from mm32_soft_i2c_v1.o(.text.i2c_read_bytes) referenced from sc7a20.o(.text.SC7A20_ReadXYZ)
 <LI><a href="#[3f]">i2c_write_byte_ack</a> from mm32_soft_i2c_v1.o(.text.i2c_write_byte_ack) referenced from mm32_soft_i2c_v1.o(.text.i2c_write_reg)
 <LI><a href="#[30]">i2c_write_reg</a> from mm32_soft_i2c_v1.o(.text.i2c_write_reg) referenced from sc7a20.o(.text.SC7A20_Init)
 <LI><a href="#[53]">init_hardware</a> from main.o(.text.init_hardware) referenced from main.o(.rti_fn.1)
 <LI><a href="#[2e]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[69]">list_event</a> from cmd.o(.text.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[6c]">list_mempool</a> from cmd.o(.text.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[6b]">list_msgqueue</a> from cmd.o(.text.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[6a]">list_mutex</a> from cmd.o(.text.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[68]">list_sem</a> from cmd.o(.text.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[67]">list_thread</a> from cmd.o(.text.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[6d]">list_timer</a> from cmd.o(.text.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[40]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced from components.o(.text.rt_application_init)
 <LI><a href="#[6f]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[60]">pwm_frequency_test</a> from pwm.o(.text.pwm_frequency_test) referenced from pwm.o(FSymTab)
 <LI><a href="#[62]">read_accelerometer_data</a> from sc7a20.o(.text.read_accelerometer_data) referenced from sc7a20.o(FSymTab)
 <LI><a href="#[43]">read_button_GPIO</a> from key.o(.text.read_button_GPIO) referenced from key.o(.text.thread_key_task_entry)
 <LI><a href="#[39]">rt_kprintf</a> from kservice.o(.text.rt_kprintf) referenced from board.o(.text.cmd_free)
 <LI><a href="#[39]">rt_kprintf</a> from kservice.o(.text.rt_kprintf) referenced from cmd.o(.text.cmd_list)
 <LI><a href="#[39]">rt_kprintf</a> from kservice.o(.text.rt_kprintf) referenced from cpuport.o(.text.rt_hw_hard_fault_exception)
 <LI><a href="#[39]">rt_kprintf</a> from kservice.o(.text.rt_kprintf) referenced from kservice.o(.text.rt_show_version)
 <LI><a href="#[42]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[34]">rt_thread_mdelay</a> from thread.o(.text.rt_thread_mdelay) referenced from onewire_bus.o(.text.WT588F_Init)
 <LI><a href="#[56]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[52]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[5b]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[51]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[61]">set_pwm_duty</a> from pwm.o(.text.set_pwm_duty) referenced from pwm.o(FSymTab)
 <LI><a href="#[38]">thread_key_task_entry</a> from key.o(.text.thread_key_task_entry) referenced from app.o(.text.app)
 <LI><a href="#[54]">uart_init</a> from board.o(.text.uart_init) referenced from board.o(.rti_fn.1)
 <LI><a href="#[5a]">ulog_console_backend_init</a> from console_be.o(.text.ulog_console_backend_init) referenced from console_be.o(.rti_fn.6)
 <LI><a href="#[4b]">ulog_console_backend_output</a> from console_be.o(.text.ulog_console_backend_output) referenced from console_be.o(.text.ulog_console_backend_init)
 <LI><a href="#[55]">ulog_init</a> from ulog.o(.text.ulog_init) referenced from ulog.o(.rti_fn.1)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from key.o(.text.BTN1_LONG_PRESS_START_Handler)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from key.o(.text.BTN2_DOUBLE_CLICK_Handler)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from key.o(.text.BTN2_SINGLE_CLICK_Handler)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from ina226.o(.text.INA226_Test)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from hx711.o(.text.hx711_test_entry)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from pwm.o(.text.pwm_frequency_test)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from sc7a20.o(.text.read_accelerometer_data)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from pwm.o(.text.set_pwm_duty)
 <LI><a href="#[2f]">ulog_output</a> from ulog.o(.text.ulog_output) referenced from console_be.o(.text.ulog_test)
 <LI><a href="#[70]">ulog_test</a> from console_be.o(.text.ulog_test) referenced from console_be.o(FSymTab)
 <LI><a href="#[66]">version</a> from cmd.o(.text.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ee]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ef]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b4]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[74]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[75]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[77]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[79]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[7b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[7c]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[7d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[7f]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[80]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[82]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[83]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[84]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[86]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[88]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[8a]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[8b]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[8c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[8e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[90]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[91]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[93]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[95]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[97]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[a1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[200]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[201]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[202]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[203]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[204]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[205]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[206]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[210]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[211]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HWDIV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_BKP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f0270_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mm32f0270_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[141]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[145]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[1b7]"></a>rt_hw_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1b6]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[213]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[214]"></a>rt_hw_interrupt_check</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, context_gcc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_ldivmod</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_tare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value_ave
</UL>

<P><STRONG><a name="[215]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[af]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b2]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b5]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
</UL>

<P><STRONG><a name="[165]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[15f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[195]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[216]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[ba]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[bf]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[be]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[156]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[219]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[21c]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[c0]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c3]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c4]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c6]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[c5]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
</UL>

<P><STRONG><a name="[21d]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetShuntVoltage
</UL>

<P><STRONG><a name="[21e]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
</UL>

<P><STRONG><a name="[21f]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetShuntVoltage
</UL>

<P><STRONG><a name="[220]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetShuntVoltage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[221]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
</UL>

<P><STRONG><a name="[222]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[223]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
</UL>

<P><STRONG><a name="[224]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[225]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_uldivmod</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[227]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[ce]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[b0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[b1]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[cf]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[81]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[76]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[4c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[ae]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[2a]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[92]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[94]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[dd]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[df]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[85]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[8d]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[87]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8f]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[78]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e3]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[b7]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1e1]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[1eb]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[228]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[229]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[4d]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[da]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[e6]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[96]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[98]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2c]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d4]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d5]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d7]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[eb]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d6]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[ed]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ee]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[de]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d1]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e8]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[4e]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[a4]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f9]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[22a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[22b]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[a8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[22c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[50]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[fc]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[fd]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[22f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ff]"></a>AutoCalPllFactor</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, system_mm32f0270.o(.text.AutoCalPllFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[46]"></a>BTN1_DOUBLE_CLICK_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(.text.BTN1_DOUBLE_CLICK_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = BTN1_DOUBLE_CLICK_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[44]"></a>BTN1_LONG_PRESS_START_Handler</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, key.o(.text.BTN1_LONG_PRESS_START_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BTN1_LONG_PRESS_START_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[47]"></a>BTN1_SINGLE_CLICK_Handler</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, key.o(.text.BTN1_SINGLE_CLICK_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BTN1_SINGLE_CLICK_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[48]"></a>BTN2_DOUBLE_CLICK_Handler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, key.o(.text.BTN2_DOUBLE_CLICK_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BTN2_DOUBLE_CLICK_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[4a]"></a>BTN2_LONG_PRESS_START_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(.text.BTN2_LONG_PRESS_START_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = BTN2_LONG_PRESS_START_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[49]"></a>BTN2_SINGLE_CLICK_Handler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, key.o(.text.BTN2_SINGLE_CLICK_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BTN2_SINGLE_CLICK_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[10b]"></a>GN1650_cfg_display</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gn1650.o(.text.GN1650_cfg_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GN1650_cfg_display &rArr; GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_wait_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
</UL>

<P><STRONG><a name="[10c]"></a>GN1650_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gn1650.o(.text.GN1650_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GN1650_clear &rArr; GN1650_print &rArr; GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
</UL>

<P><STRONG><a name="[10d]"></a>GN1650_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gn1650.o(.text.GN1650_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GN1650_init &rArr; GN1650_clear &rArr; GN1650_print &rArr; GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gn1650_demo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
</UL>

<P><STRONG><a name="[3a]"></a>GN1650_print</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gn1650.o(.text.GN1650_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GN1650_print &rArr; GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_wait_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gn1650.o(.text.display_test)
<LI> gn1650.o(.text.gn1650_demo)
</UL>
<P><STRONG><a name="[10e]"></a>GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[16d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[109]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_button_GPIO
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_wait_ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[107]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_power_down
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_wait_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[101]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_power_down
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_wait_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_IIC_start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[10f]"></a>INA226_GetBusVoltage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ina226.o(.text.INA226_GetBusVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_GetBusVoltage &rArr; INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[113]"></a>INA226_GetCurrent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ina226.o(.text.INA226_GetCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_GetCurrent &rArr; INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[114]"></a>INA226_GetDieID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ina226.o(.text.INA226_GetDieID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_GetDieID &rArr; INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[115]"></a>INA226_GetPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ina226.o(.text.INA226_GetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_GetPower &rArr; INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[116]"></a>INA226_GetShuntVoltage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ina226.o(.text.INA226_GetShuntVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_GetShuntVoltage &rArr; INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[117]"></a>INA226_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ina226.o(.text.INA226_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = INA226_Init &rArr; i2c_bus_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_WriteReg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
</UL>

<P><STRONG><a name="[110]"></a>INA226_ReadReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ina226.o(.text.INA226_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = INA226_ReadReg &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetDieID
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetPower
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetShuntVoltage
</UL>

<P><STRONG><a name="[5e]"></a>INA226_Test</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ina226.o(.text.INA226_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = INA226_Test &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetDieID
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetPower
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetBusVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_GetShuntVoltage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ina226.o(FSymTab)
</UL>
<P><STRONG><a name="[119]"></a>INA226_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ina226.o(.text.INA226_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = INA226_WriteReg &rArr; i2c_write_bytes &rArr; i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f0270_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d6]"></a>NVIC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[16b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[16c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[1d3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[102]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[11d]"></a>RCC_GetHCLKFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[11e]"></a>RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11f]"></a>RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11c]"></a>RCC_GetSysClockFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[120]"></a>ReadByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl6180x.o(.text.ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadByte &rArr; i2c_read_reg16 &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_Read_Range
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Poll_Range
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Init
</UL>

<P><STRONG><a name="[122]"></a>SC7A20_GetZAxisAngle</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, sc7a20.o(.text.SC7A20_GetZAxisAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SC7A20_GetZAxisAngle &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accelerometer_data
</UL>

<P><STRONG><a name="[19b]"></a>SC7A20_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sc7a20.o(.text.SC7A20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SC7A20_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accelerometer_data
</UL>

<P><STRONG><a name="[128]"></a>SC7A20_ReadXYZ</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, sc7a20.o(.text.SC7A20_ReadXYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SC7A20_ReadXYZ &rArr; i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accelerometer_data
</UL>

<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f0270_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mm32f0270_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, system_mm32f0270.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemInit &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_xUs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f0270_it.o(.text.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f0270_it.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[177]"></a>TIM_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[178]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[172]"></a>TIM_OC1Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[174]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[173]"></a>TIM_OC2Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[175]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[171]"></a>TIM_OCStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[176]"></a>TIM_PWMShiftConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_PWMShiftConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[16f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[16e]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_tim.o(.text.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>

<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mm32_uart.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mm32_uart.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f0270_keil.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>UART_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[1a7]"></a>UART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[12a]"></a>UART_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[12d]"></a>UART_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[12b]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>

<P><STRONG><a name="[1a9]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[1d4]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[12e]"></a>VL6180X_Clear_Interrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vl6180x.o(.text.VL6180X_Clear_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL6180X_Clear_Interrupt &rArr; WriteByte &rArr; i2c_write_bytes &rArr; i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
</UL>

<P><STRONG><a name="[12f]"></a>VL6180X_Init</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, vl6180x.o(.text.VL6180X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL6180X_Init &rArr; ReadByte &rArr; i2c_read_reg16 &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
</UL>

<P><STRONG><a name="[130]"></a>VL6180X_Poll_Range</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vl6180x.o(.text.VL6180X_Poll_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = VL6180X_Poll_Range &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
</UL>

<P><STRONG><a name="[131]"></a>VL6180X_Start_Range</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl6180x.o(.text.VL6180X_Start_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL6180X_Start_Range &rArr; WriteByte &rArr; i2c_write_bytes &rArr; i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
</UL>

<P><STRONG><a name="[63]"></a>VL6180_ReadAndLog</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vl6180x.o(.text.VL6180_ReadAndLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = VL6180_ReadAndLog &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Clear_Interrupt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_Read_Range
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Poll_Range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Start_Range
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl6180x.o(FSymTab)
</UL>
<P><STRONG><a name="[132]"></a>VL6180_Read_Range</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vl6180x.o(.text.VL6180_Read_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL6180_Read_Range &rArr; ReadByte &rArr; i2c_read_reg16 &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
</UL>

<P><STRONG><a name="[133]"></a>WT588F_GPIO_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, onewire_bus.o(.text.WT588F_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WT588F_GPIO_Init &rArr; gpio_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Init
</UL>

<P><STRONG><a name="[5f]"></a>WT588F_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, onewire_bus.o(.text.WT588F_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = WT588F_Init &rArr; WT588F_Stop_Voice &rArr; WT588F_Send_Byte &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Stop_Voice
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onewire_bus.o(FSymTab)
</UL>
<P><STRONG><a name="[35]"></a>WT588F_Send_Byte</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, onewire_bus.o(.text.WT588F_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WT588F_Send_Byte &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_voice_us_delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Stop_Voice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onewire_bus.o(.text.WT588F_Init)
</UL>
<P><STRONG><a name="[134]"></a>WT588F_Stop_Voice</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, onewire_bus.o(.text.WT588F_Stop_Voice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = WT588F_Stop_Voice &rArr; WT588F_Send_Byte &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Init
</UL>

<P><STRONG><a name="[33]"></a>WriteByte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, vl6180x.o(.text.WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteByte &rArr; i2c_write_bytes &rArr; i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Clear_Interrupt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Start_Range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl6180x.o(.text.VL6180X_Init)
</UL>
<P><STRONG><a name="[140]"></a>__rt_ffs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[14f]"></a>app</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app.o(.text.app))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = app &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[45]"></a>button_attach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_button.o(.text.button_attach))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[153]"></a>button_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, multi_button.o(.text.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = button_init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
</UL>

<P><STRONG><a name="[1d1]"></a>button_start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, multi_button.o(.text.button_start))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
</UL>

<P><STRONG><a name="[1d2]"></a>button_ticks</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, multi_button.o(.text.button_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
</UL>

<P><STRONG><a name="[64]"></a>cmd_free</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, board.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(FSymTab)
</UL>
<P><STRONG><a name="[6e]"></a>cmd_list</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, cmd.o(.text.cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = cmd_list &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[157]"></a>console_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, platform.o(.text.console_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = console_init &rArr; uart_config &rArr; UART_Init &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[0]"></a>default_delay_us</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.default_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = default_delay_us &rArr; rt_hw_us_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mm32_soft_i2c_v1.o(.text.i2c_bus_init)
<LI> vl6180x.o(.data.i2c3)
<LI> sc7a20.o(.data.i2c2)
</UL>
<P><STRONG><a name="[5c]"></a>display_test</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, gn1650.o(.text.display_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = display_test &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gn1650.o(FSymTab)
</UL>
<P><STRONG><a name="[15e]"></a>finsh_get_prompt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, shell.o(.text.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_get_prompt &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
</UL>

<P><STRONG><a name="[160]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = finsh_getchar &rArr; rt_hw_console_getchar &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[59]"></a>finsh_system_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[3c]"></a>finsh_thread_entry</STRONG> (Thumb, 932 bytes, Stack size 24 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[16a]"></a>full_bridge_init</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, pwm.o(.text.full_bridge_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = full_bridge_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMShiftConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init_app
</UL>

<P><STRONG><a name="[58]"></a>full_bridge_init_app</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm.o(.text.full_bridge_init_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = full_bridge_init_app &rArr; full_bridge_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_bridge_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[103]"></a>gn1650_demo</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gn1650.o(.text.gn1650_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gn1650_demo &rArr; GN1650_init &rArr; GN1650_clear &rArr; GN1650_print &rArr; GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_DOUBLE_CLICK_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
</UL>

<P><STRONG><a name="[3d]"></a>gpio_config</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mm32_gpio.o(.text.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.gpio_init)
</UL>
<P><STRONG><a name="[57]"></a>gpio_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, key.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[152]"></a>gpio_toggle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mm32_gpio.o(.text.gpio_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app
</UL>

<P><STRONG><a name="[17e]"></a>hx711_delay_us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hx711.o(.text.hx711_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = hx711_delay_us &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
</UL>

<P><STRONG><a name="[17f]"></a>hx711_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hx711.o(.text.hx711_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hx711_init &rArr; hx711_value &rArr; hx711_delay_us &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_lock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
</UL>

<P><STRONG><a name="[180]"></a>hx711_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hx711.o(.text.hx711_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hx711_lock &rArr; rt_hw_us_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_tare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value_ave
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
</UL>

<P><STRONG><a name="[182]"></a>hx711_power_down</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hx711.o(.text.hx711_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hx711_power_down &rArr; rt_hw_us_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
</UL>

<P><STRONG><a name="[183]"></a>hx711_tare</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hx711.o(.text.hx711_tare))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hx711_tare &rArr; hx711_value &rArr; hx711_delay_us &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_lock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
</UL>

<P><STRONG><a name="[181]"></a>hx711_value</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hx711.o(.text.hx711_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hx711_value &rArr; hx711_delay_us &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_delay_us
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_tare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value_ave
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
</UL>

<P><STRONG><a name="[184]"></a>hx711_value_ave</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hx711.o(.text.hx711_value_ave))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hx711_value_ave &rArr; hx711_value &rArr; hx711_delay_us &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_lock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
</UL>

<P><STRONG><a name="[118]"></a>i2c_bus_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = i2c_bus_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accelerometer_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
</UL>

<P><STRONG><a name="[31]"></a>i2c_read_bytes</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_read_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_read_bytes &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_ReadXYZ
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sc7a20.o(.text.SC7A20_ReadXYZ)
</UL>
<P><STRONG><a name="[121]"></a>i2c_read_reg16</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_read_reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_read_reg16 &rArr; i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>

<P><STRONG><a name="[11b]"></a>i2c_write_bytes</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_write_bytes &rArr; i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte_ack
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_WriteReg
</UL>

<P><STRONG><a name="[30]"></a>i2c_write_reg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_write_reg &rArr; i2c_stop &rArr; i2c_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sc7a20.o(.text.SC7A20_Init)
</UL>
<P><STRONG><a name="[53]"></a>init_hardware</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.init_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_hardware &rArr; platform_init &rArr; systick_init &rArr; RCC_GetClocksFreq &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[69]"></a>list_event</STRONG> (Thumb, 192 bytes, Stack size 104 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6c]"></a>list_mempool</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6b]"></a>list_msgqueue</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6a]"></a>list_mutex</STRONG> (Thumb, 172 bytes, Stack size 112 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[68]"></a>list_sem</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[67]"></a>list_thread</STRONG> (Thumb, 272 bytes, Stack size 240 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6d]"></a>list_timer</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[193]"></a>$Super$$main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; app &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[40]"></a>main_thread_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; app &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[167]"></a>msh_auto_complete</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[168]"></a>msh_exec</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = msh_exec &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6f]"></a>msh_help</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[18c]"></a>platform_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platform.o(.text.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = platform_init &rArr; systick_init &rArr; RCC_GetClocksFreq &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[60]"></a>pwm_frequency_test</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, pwm.o(.text.pwm_frequency_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = pwm_frequency_test &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[62]"></a>read_accelerometer_data</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, sc7a20.o(.text.read_accelerometer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = read_accelerometer_data &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_ReadXYZ
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sc7a20.o(FSymTab)
</UL>
<P><STRONG><a name="[43]"></a>read_button_GPIO</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, key.o(.text.read_button_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_button_GPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.thread_key_task_entry)
</UL>
<P><STRONG><a name="[19c]"></a>rt_application_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[162]"></a>rt_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kservice.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1a3]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[194]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[19e]"></a>rt_enter_critical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[19f]"></a>rt_exit_critical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1a0]"></a>rt_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1a4]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1a5]"></a>rt_heap_end_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(.text.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1a2]"></a>rt_hw_board_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_smem_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[161]"></a>rt_hw_console_getchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board.o(.text.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = rt_hw_console_getchar &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1a8]"></a>rt_hw_console_output</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, board.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[a9]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[149]"></a>rt_hw_stack_init</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[159]"></a>rt_hw_us_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform.o(.text.rt_hw_us_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_power_down
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_tare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value_ave
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_lock
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_delay_us
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
</UL>

<P><STRONG><a name="[1aa]"></a>rt_interrupt_enter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[15b]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
</UL>

<P><STRONG><a name="[1ab]"></a>rt_interrupt_leave</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[39]"></a>rt_kprintf</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Address Reference Count : 4]<UL><LI> cpuport.o(.text.rt_hw_hard_fault_exception)
<LI> board.o(.text.cmd_free)
<LI> kservice.o(.text.rt_show_version)
<LI> cmd.o(.text.cmd_list)
</UL>
<P><STRONG><a name="[15d]"></a>rt_kputs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kservice.o(.text.rt_kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_kputs &rArr; rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[19d]"></a>rt_malloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[166]"></a>rt_memcpy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, kservice.o(.text.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[164]"></a>rt_memmove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[155]"></a>rt_memory_info</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(.text.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[148]"></a>rt_memset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1ad]"></a>rt_mutex_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[13a]"></a>rt_mutex_release</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[138]"></a>rt_mutex_take</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ipc.o(.text.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[1b2]"></a>rt_object_allocate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1b3]"></a>rt_object_delete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1b4]"></a>rt_object_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[18d]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[1ae]"></a>rt_object_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1c2]"></a>rt_object_is_systemobject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[129]"></a>rt_os_tick_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text.rt_os_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[146]"></a>rt_schedule</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[14b]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[142]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[163]"></a>rt_sem_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1cc]"></a>rt_show_version</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[1ac]"></a>rt_smem_alloc</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, mem.o(.text.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_smem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1a1]"></a>rt_smem_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mem.o(.text.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_smem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1b9]"></a>rt_smem_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mem.o(.text.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rt_smem_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1ba]"></a>rt_snprintf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kservice.o(.text.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
</UL>

<P><STRONG><a name="[14e]"></a>rt_soft_timer_check</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, timer.o(.text.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1bc]"></a>rt_sprintf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[192]"></a>rt_strerror</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text.rt_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[15c]"></a>rt_strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[196]"></a>rt_strncpy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1a6]"></a>rt_system_heap_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, kservice.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rt_system_heap_init &rArr; rt_smem_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ce]"></a>rt_system_scheduler_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1be]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1cd]"></a>rt_system_timer_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c0]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1af]"></a>rt_thread_control</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[150]"></a>rt_thread_create</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1c5]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, idle.o(.text.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_thread_defunct_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[144]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_defunct_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[11a]"></a>rt_thread_delay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1c4]"></a>rt_thread_delete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1c3]"></a>rt_thread_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1c7]"></a>rt_thread_idle_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = rt_thread_idle_init &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c1]"></a>rt_thread_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[34]"></a>rt_thread_mdelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180X_Poll_Range
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_delay_us
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onewire_bus.o(.text.WT588F_Init)
</UL>
<P><STRONG><a name="[13c]"></a>rt_thread_resume</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>

<P><STRONG><a name="[137]"></a>rt_thread_self</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1c6]"></a>rt_thread_sleep</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[151]"></a>rt_thread_startup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[13e]"></a>rt_thread_suspend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1c8]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_from_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[14d]"></a>rt_tick_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1b5]"></a>rt_tick_increase</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1ca]"></a>rt_timer_check</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1b0]"></a>rt_timer_control</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[143]"></a>rt_timer_detach</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[14a]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[1b1]"></a>rt_timer_start</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[1c9]"></a>rt_timer_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[135]"></a>rt_voice_us_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, onewire_bus.o(.text.rt_voice_us_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_voice_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT588F_Send_Byte
</UL>

<P><STRONG><a name="[1bb]"></a>rt_vsnprintf</STRONG> (Thumb, 700 bytes, Stack size 72 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[1bd]"></a>rt_vsprintf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[fe]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>set_pwm_duty</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, pwm.o(.text.set_pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = set_pwm_duty &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[199]"></a>systick_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, platform.o(.text.systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = systick_init &rArr; RCC_GetClocksFreq &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[38]"></a>thread_key_task_entry</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, key.o(.text.thread_key_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = thread_key_task_entry &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_ticks
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text.app)
</UL>
<P><STRONG><a name="[158]"></a>uart_config</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, mm32_uart.o(.text.uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_config &rArr; UART_Init &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
</UL>

<P><STRONG><a name="[1d8]"></a>ulog_backend_register</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ulog.o(.text.ulog_backend_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ulog_backend_register &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>

<P><STRONG><a name="[5a]"></a>ulog_console_backend_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, console_be.o(.text.ulog_console_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ulog_console_backend_init &rArr; ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[4b]"></a>ulog_console_backend_output</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, console_be.o(.text.ulog_console_backend_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ulog_console_backend_output &rArr; rt_kputs &rArr; rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.text.ulog_console_backend_init)
</UL>
<P><STRONG><a name="[1d9]"></a>ulog_formater</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ulog.o(.text.ulog_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ulog_formater &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[1da]"></a>ulog_head_formater</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ulog.o(.text.ulog_head_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ulog_head_formater &rArr; ulog_strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[1dd]"></a>ulog_hex_formater</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ulog.o(.text.ulog_hex_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[55]"></a>ulog_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ulog.o(.text.ulog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[2f]"></a>ulog_output</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ulog.o(.text.ulog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL6180_ReadAndLog
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accelerometer_data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_frequency_test
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_DOUBLE_CLICK_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_LONG_PRESS_START_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_DOUBLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_test_entry
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_task_entry
</UL>
<BR>[Address Reference Count : 9]<UL><LI> hx711.o(.text.hx711_test_entry)
<LI> key.o(.text.BTN2_SINGLE_CLICK_Handler)
<LI> key.o(.text.BTN2_DOUBLE_CLICK_Handler)
<LI> ina226.o(.text.INA226_Test)
<LI> sc7a20.o(.text.read_accelerometer_data)
<LI> key.o(.text.BTN1_LONG_PRESS_START_Handler)
<LI> pwm.o(.text.pwm_frequency_test)
<LI> pwm.o(.text.set_pwm_duty)
<LI> console_be.o(.text.ulog_test)
</UL>
<P><STRONG><a name="[1dc]"></a>ulog_strcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ulog.o(.text.ulog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[1db]"></a>ulog_tail_formater</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ulog.o(.text.ulog_tail_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ulog_tail_formater &rArr; ulog_strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[1de]"></a>ulog_voutput</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ulog.o(.text.ulog_voutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[66]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = version &rArr; rt_show_version
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ea]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[d9]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[1df]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1e0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1e2]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[1e3]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[f5]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1e4]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[fb]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[b3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[126]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
</UL>

<P><STRONG><a name="[1cf]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
</UL>

<P><STRONG><a name="[1e5]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1e8]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[124]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7A20_GetZAxisAngle
</UL>

<P><STRONG><a name="[29]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1ec]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1ed]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_duty
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN2_SINGLE_CLICK_Handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_SINGLE_CLICK_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN1_LONG_PRESS_START_Handler
</UL>

<P><STRONG><a name="[231]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[7a]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[7e]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[e2]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[f4]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f3]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18a]"></a>i2c_start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mm32_soft_i2c_v1.o(.text.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_start &rArr; i2c_delay_us &rArr; rt_hw_us_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bytes
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_reg16
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_reg
</UL>

<P><STRONG><a name="[18b]"></a>i2c_stop</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_stop &rArr; i2c_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bytes
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_reg16
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_reg
</UL>

<P><STRONG><a name="[3f]"></a>i2c_write_byte_ack</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mm32_soft_i2c_v1.o(.text.i2c_write_byte_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_write_byte_ack &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm32_soft_i2c_v1.o(.text.i2c_write_reg)
</UL>
<P><STRONG><a name="[185]"></a>i2c_sda</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.i2c_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[186]"></a>i2c_scl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.i2c_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[3e]"></a>i2c_delay_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.i2c_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_delay_us &rArr; rt_hw_us_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm32_soft_i2c_v1.o(.text.i2c_stop)
</UL>
<P><STRONG><a name="[189]"></a>i2c_read_byte</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_read_byte &rArr; i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_bytes
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_reg16
</UL>

<P><STRONG><a name="[188]"></a>i2c_clock_cycle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mm32_soft_i2c_v1.o(.text.i2c_clock_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_clock_cycle &rArr; i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay_us
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sda
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte_ack
</UL>

<P><STRONG><a name="[187]"></a>i2c_read_sda</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.i2c_read_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_read_sda &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_cycle
</UL>

<P><STRONG><a name="[17c]"></a>gpio_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mm32_soft_i2c_v1.o(.text.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
</UL>

<P><STRONG><a name="[106]"></a>GN1650_IIC_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gn1650.o(.text.GN1650_IIC_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GN1650_IIC_start
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
</UL>

<P><STRONG><a name="[10a]"></a>GN1650_IIC_write_byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gn1650.o(.text.GN1650_IIC_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GN1650_IIC_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
</UL>

<P><STRONG><a name="[3b]"></a>GN1650_IIC_wait_ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gn1650.o(.text.GN1650_IIC_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GN1650_IIC_wait_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gn1650.o(.text.display_test)
</UL>
<P><STRONG><a name="[108]"></a>GN1650_IIC_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gn1650.o(.text.GN1650_IIC_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GN1650_IIC_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_print
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GN1650_cfg_display
</UL>

<P><STRONG><a name="[5d]"></a>hx711_test_entry</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, hx711.o(.text.hx711_test_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = hx711_test_entry &rArr; ulog_output &rArr; ulog_voutput &rArr; ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_power_down
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_tare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_value_ave
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx711_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx711.o(FSymTab)
</UL>
<P><STRONG><a name="[32]"></a>DELAY_xUs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_mm32f0270.o(.text.DELAY_xUs))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_mm32f0270.o(.text.SystemInit)
</UL>
<P><STRONG><a name="[51]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[52]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[56]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[5b]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[42]"></a>rt_thread_idle_entry</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = rt_thread_idle_entry &rArr;  rt_thread_idle_entry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[13d]"></a>_ipc_list_suspend</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipc.o(.text._ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[13b]"></a>_ipc_list_resume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ipc.o(.text._ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[136]"></a>_heap_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(.text._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[139]"></a>_heap_unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kservice.o(.text._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1cb]"></a>skip_atoi</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[19a]"></a>print_number</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1b8]"></a>plug_holes</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[13f]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[147]"></a>_thread_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, thread.o(.text._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[36]"></a>_thread_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(.text._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[37]"></a>_thread_timeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(.text._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _thread_timeout &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[14c]"></a>_timer_list_next_timeout</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(.text._timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[41]"></a>_timer_thread_entry</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(.text._timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _timer_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[54]"></a>uart_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = uart_init &rArr; console_init &rArr; uart_config &rArr; UART_Init &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[65]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = clear &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[18e]"></a>object_split</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmd.o(.text.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[18f]"></a>list_get_next</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[190]"></a>rt_list_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(.text.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[191]"></a>show_wait_queue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmd.o(.text.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[169]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[179]"></a>get_log_buf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ulog.o(.text.get_log_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = get_log_buf &rArr; rt_kprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[197]"></a>output_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ulog.o(.text.output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = output_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[15a]"></a>do_output</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, ulog.o(.text.do_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = do_output &rArr; ulog_console_backend_output &rArr; rt_kputs &rArr; rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[198]"></a>output_unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ulog.o(.text.output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = output_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[70]"></a>ulog_test</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, console_be.o(.text.ulog_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ulog_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(FSymTab)
</UL>
<P><STRONG><a name="[c2]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c1]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d3]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>_local_sscanf</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[e9]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ec]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f1]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[f6]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[dc]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e7]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
